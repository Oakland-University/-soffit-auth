/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package edu.oakland.soffit.auth;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNotNull;
import static org.junit.jupiter.api.Assertions.assertThrows;
import static org.junit.jupiter.api.Assertions.assertTrue;

import java.util.Map;

import com.auth0.jwt.JWT;
import com.auth0.jwt.JWTVerifier;
import com.auth0.jwt.algorithms.Algorithm;
import com.auth0.jwt.interfaces.Claim;
import com.auth0.jwt.interfaces.DecodedJWT;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.springframework.http.HttpHeaders;
import org.springframework.mock.web.MockHttpServletRequest;
import org.springframework.test.util.ReflectionTestUtils;

public class LibraryTest {
  private AuthService authorizer = new AuthService();
  byte[] encodedSecret = javax.xml.bind.DatatypeConverter.parseBase64Binary("CHANGEME");

  private static String demoToken =
      "eyJhbGciOiJIUzUxMiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyLCJpc3MiOiJTb2ZmaXQifQ.7vb5lETzLAf3KCUTBLCLi5Hw_yDU1zgr8ZbXlrVT-O5vBxeBCjV16THFomPk9lTJpkf4a6Zb7TtOuyeYqwLkMQ";
  private static String expiredToken =
      "eyJhbGciOiJIUzUxMiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyLCJleHAiOjE1MTYyMzkwMjJ9.C1heqK55YxKuzeIsvTaq3U2Yc3vyHELdhGhM8DqOF2g0bKYCzxa6ZeWzzcIzqauEsu-Q6YzYoV70Wufxflftqg";
  private static String encryptedToken = "ev2iYPy2XCIioQPg+OWp8ac0mVx6FGic42s8q/TF/a06q0WMJTF4FS9IxVyuL0Di6Jo4qlzOpu8CGdqH+jGUik1pDw2lgadXrBMgj2sdOVRguwslETxJkvONUF+D/XFh7qxfVQHncYHLGIgo9EmwNJ/NGNLDQKtfXiJI2WxhhbBInIHYZv4qY2NJdP54aY9KRAQfkLf98iRkx15XiZKK9wUeIf8LbVs4psN93o/PzrI7bJ4BwEHguxyXIA9Dq1ZDzjqSIwILvBxZVNYCbyhFLJtSHvW4rghlCJJbG2O4+61BPuODb98K9WxaoocHe8Z1ks90Xxcf2zA=";

  @BeforeEach
  public void stuff() {
    ReflectionTestUtils.setField(authorizer, "SIGNATURE_KEY", "CHANGEME");
    ReflectionTestUtils.setField(authorizer, "ENCRYPTION_PASSWORD", "CHANGEME");
    ReflectionTestUtils.setField(authorizer, "ISSUER", "Soffit");
    ReflectionTestUtils.setField(authorizer, "strictMode", true);
    ReflectionTestUtils.setField(authorizer, "algorithm", "HS512");
    authorizer.init();
  }

  // ----------- getBearerToken tests -----------------------------------------

  @Test
  public void getBearerToken_givenExpected_returnsToken() throws SoffitAuthException {
    MockHttpServletRequest request = new MockHttpServletRequest();
    request.addHeader(HttpHeaders.AUTHORIZATION, "Bearer " + demoToken);

    String actual = authorizer.getBearerToken(request);
    assertEquals(actual, demoToken);
  }

  @Test
  public void getBearerToken_givenNoAuthHeader_throwsException() throws SoffitAuthException {
    MockHttpServletRequest request = new MockHttpServletRequest();

    assertThrows(
        SoffitAuthException.class,
        () -> {
          authorizer.getBearerToken(request);
        });
  }

  @Test
  public void getBearerToken_givenBadAuthHeader_throwsException() throws SoffitAuthException {
    MockHttpServletRequest request = new MockHttpServletRequest();
    request.addHeader(HttpHeaders.AUTHORIZATION, "Bearer" + demoToken);

    assertThrows(
        SoffitAuthException.class,
        () -> {
          authorizer.getBearerToken(request);
        });
  }

  // ----------- determineAlgorithm tests -------------------------------------

  @Test
  public void determineAlgorithm_givenValid_returnsAlgorithm() throws SoffitAuthException {
    Algorithm actual = authorizer.determineAlgorithm(demoToken);
    assertEquals(Algorithm.HMAC512(encodedSecret).toString(), actual.toString());
  }

  @Test
  public void determineAlgorithm_givenNonJWT_ThrowsError() throws SoffitAuthException {
    assertThrows(
        SoffitAuthException.class,
        () -> {
          authorizer.determineAlgorithm("HELLWEOiRJ");
        });
  }

  // ----------- verifyToken tests --------------------------------------------

  private boolean sameDecodedToken(DecodedJWT one, DecodedJWT two) {
    return one.getToken().equals(two.getToken())
            && one.getPayload().equals(two.getPayload())
            && one.getSignature().equals(two.getSignature())
        ? true
        : false;
  }

  @Test
  public void verifyToken_givenValid_returnsDecodedJWT() throws SoffitAuthException {
    JWTVerifier verifier =
        JWT.require(Algorithm.HMAC512(encodedSecret)).withIssuer("Soffit").build();
    DecodedJWT actual = authorizer.verifyToken(demoToken);

    assertTrue(sameDecodedToken(verifier.verify(demoToken), actual));
  }

  @Test
  public void verifyToken_givenExpired_throwsException() throws SoffitAuthException {
    assertThrows(
        SoffitAuthException.class,
        () -> {
          authorizer.verifyToken(expiredToken);
        });
  }

  @Test
  public void getClaimFromJWTTest() throws SoffitAuthException {
    MockHttpServletRequest request = new MockHttpServletRequest();
    request.addHeader(HttpHeaders.AUTHORIZATION, "Bearer " + demoToken);
    String a = authorizer.getClaimFromJWT(request, "name").asString();
    assertEquals("John Doe", a);
  }

  @Test
  public void getClaimFromJWETest() throws SoffitAuthException {
    MockHttpServletRequest request = new MockHttpServletRequest();
    request.addHeader(HttpHeaders.AUTHORIZATION, "Bearer " + encryptedToken);
    String a = authorizer.getClaimFromJWE(request, "name").asString();
    assertEquals("John Doe", a);
  }

  @Test
  public void getClaimsFromJWTTest() throws SoffitAuthException {
    MockHttpServletRequest request = new MockHttpServletRequest();
    request.addHeader(HttpHeaders.AUTHORIZATION, "Bearer " + demoToken);
    Map<String, Claim> map = authorizer.getClaimsFromJWT(request, "name", "iss", "not-present");

    assertNotNull(map);
    assertEquals("John Doe", map.get("name").asString());
    assertEquals("Soffit", map.get("iss").asString());
    assertEquals(null, map.get("not-present"));
  }

  @Test
  public void getClaimsFromJWETest() throws SoffitAuthException {
    MockHttpServletRequest request = new MockHttpServletRequest();
    request.addHeader(HttpHeaders.AUTHORIZATION, "Bearer " + encryptedToken);
    Map<String, Claim> map = authorizer.getClaimsFromJWE(request, "name", "iss", "not-present");

    assertNotNull(map);
    assertEquals("John Doe", map.get("name").asString());
    assertEquals("Soffit", map.get("iss").asString(), "Soffit");
    assertEquals(null, map.get("not-present"));
  }
}
